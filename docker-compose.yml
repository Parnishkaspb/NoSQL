version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    env_file:
      - .env
    ports:
      - "8100:8100"
    command: [ "/app/wait-and-start.sh" ]

    networks:
      - neo4jnet

  # === MongoDB Replica Set ===
  mongo1:
    image: mongo:6
    container_name: mongo1
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: [ "mongod", "--replSet", "rs0", "--keyFile", "/etc/mongo-keyfile", "--auth" ]

    volumes:
      - ./mongo-keyfile:/etc/mongo-keyfile:ro
      - mongo1_data:/data/db
    networks:
      - neo4jnet


  mongo2:
    image: mongo:6
    container_name: mongo2
#    command: ["mongod", "--replSet", "rs0"]
    ports:
      - "27018:27017"
    command: [ "mongod", "--replSet", "rs0", "--keyFile", "/etc/mongo-keyfile", "--auth" ]

    volumes:
      - ./mongo-keyfile:/etc/mongo-keyfile:ro
      - mongo2_data:/data/db
    networks:
      - neo4jnet


  mongo3:
    image: mongo:6
    container_name: mongo3
#    command: ["mongod", "--replSet", "rs0"]
    ports:
      - "27019:27017"
    command: [ "mongod", "--replSet", "rs0", "--keyFile", "/etc/mongo-keyfile", "--auth" ]

    volumes:
      - ./mongo-keyfile:/etc/mongo-keyfile:ro
      - mongo3_data:/data/db

    networks:
      - neo4jnet





  mongo4:
    image: mongo:6
    container_name: mongo4
    ports:
      - "27020:27017"
    command: [ "mongod", "--replSet", "rs0", "--keyFile", "/etc/mongo-keyfile", "--auth" ]
    volumes:
      - ./mongo-keyfile:/etc/mongo-keyfile:ro
      - mongo4_data:/data/db
    networks:
      - neo4jnet


  mongo5:
    image: mongo:6
    container_name: mongo5
    ports:
      - "27021:27017"
    command: [ "mongod", "--replSet", "rs0", "--keyFile", "/etc/mongo-keyfile", "--auth" ]
    volumes:
      - ./mongo-keyfile:/etc/mongo-keyfile:ro
      - mongo5_data:/data/db
    networks:
      - neo4jnet

  mongoinit:
    image: mongo:6
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    entrypoint: >
      sh -c "
        sleep 5 &&
        mongosh --host mongo1 --eval '
        rs.initiate({
          _id: \"rs0\",
          members: [
            { _id: 0, host: \"mongo1:27017\" },
            { _id: 1, host: \"mongo2:27017\" },
            { _id: 2, host: \"mongo3:27017\" }
          ]
        })'"
    restart: on-failure

  # === Redis with Sentinel ===
  redis-master:
    image: redis:7
    container_name: redis-master
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
    networks:
      - neo4jnet

  redis-replica1:
    image: redis:7
    container_name: redis-replica1
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_replica1_data:/data
    networks:
      - neo4jnet

  redis-replica2:
    image: redis:7
    container_name: redis-replica2
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_replica2_data:/data
    networks:
      - neo4jnet

#  redis-sentinel1:
#    image: bitnami/redis-sentinel:latest
#    container_name: redis-sentinel1
#    environment:
#      - REDIS_MASTER_HOST=redis-master
#      - REDIS_MASTER_PORT_NUMBER=6379
#      - REDIS_SENTINEL_QUORUM=2
#
#  redis-sentinel2:
#    image: bitnami/redis-sentinel:latest
#    container_name: redis-sentinel2
#    environment:
#      - REDIS_MASTER_HOST=redis-master
#      - REDIS_MASTER_PORT_NUMBER=6379
#      - REDIS_SENTINEL_QUORUM=2
#
#  redis-sentinel3:
#    image: bitnami/redis-sentinel:latest
#    container_name: redis-sentinel3
#    environment:
#      - REDIS_MASTER_HOST=redis-master
#      - REDIS_MASTER_PORT_NUMBER=6379
#      - REDIS_SENTINEL_QUORUM=2
  redis-sentinel1:
    image: bitnami/redis-sentinel:latest
    container_name: redis-sentinel1
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT_NUMBER=6379
      - REDIS_SENTINEL_QUORUM=2
    networks:
      - neo4jnet
    ports:
      - "26379:26379"  # опционально, для диагностики

  redis-sentinel2:
    image: bitnami/redis-sentinel:latest
    container_name: redis-sentinel2
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT_NUMBER=6379
      - REDIS_SENTINEL_QUORUM=2
    networks:
      - neo4jnet

  redis-sentinel3:
    image: bitnami/redis-sentinel:latest
    container_name: redis-sentinel3
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT_NUMBER=6379
      - REDIS_SENTINEL_QUORUM=2
    networks:
      - neo4jnet

  # === Neo4j Causal Cluster (dev mode) ===
  core1:
    image: neo4j:enterprise
    container_name: core1
    hostname: core1
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_AUTH=neo4j/password
    volumes:
      - ./core1.conf:/conf/neo4j.conf
      - core1_data:/data
    networks:
      - neo4jnet

  core2:
    image: neo4j:enterprise
    container_name: core2
    hostname: core2
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_AUTH=neo4j/password
    volumes:
      - ./core2.conf:/conf/neo4j.conf
      - core2_data:/data
    networks:
      - neo4jnet

  core3:
    image: neo4j:enterprise
    container_name: core3
    hostname: core3
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_AUTH=neo4j/password
    volumes:
      - ./core3.conf:/conf/neo4j.conf
      - core3_data:/data
    networks:
      - neo4jnet


volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  redis_master_data:
  redis_replica1_data:
  redis_replica2_data:
  core1_data:
  core2_data:
  core3_data:


  mongo4_data:
  mongo5_data:


networks:
  neo4jnet:
    driver: bridge